[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Stat 151",
    "section": "",
    "text": "Course Materials\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nDate\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nMar 3, 2023\n\n\nHomework 5: Vectors and Control Structures\n\n\nYour Name\n\n\n\n\nFeb 24, 2023\n\n\nHomework 4: Cipher\n\n\nYour Name\n\n\n\n\nFeb 17, 2023\n\n\nHomework 3: Basic Data Types\n\n\nYour Name\n\n\n\n\nFeb 10, 2023\n\n\nHomework 2: Finding Your Way in R and Python\n\n\nYour Name\n\n\n\n\nFeb 3, 2023\n\n\nHomework 1: Scripts and Notebooks\n\n\nYour Name\n\n\n\n\nJan 25, 2023\n\n\nStat 151 - Introduction\n\n\n\n\n\n\n\n\nNo matching items\n\n\n\n\nExams\nComing soon!"
  },
  {
    "objectID": "homework/01-scripts-notebooks.html",
    "href": "homework/01-scripts-notebooks.html",
    "title": "Homework 1: Scripts and Notebooks",
    "section": "",
    "text": "Download the starter qmd file here"
  },
  {
    "objectID": "homework/01-scripts-notebooks.html#what-is-the-difference-between-a-script-and-a-notebook",
    "href": "homework/01-scripts-notebooks.html#what-is-the-difference-between-a-script-and-a-notebook",
    "title": "Homework 1: Scripts and Notebooks",
    "section": "What is the difference between a script and a notebook?",
    "text": "What is the difference between a script and a notebook?\nReplace this paragraph with 2-3 sentences describing your understanding of the difference between a script and a notebook. Your answer should be applicable to R or python (so if you discuss python notebooks, you should also discuss the equivalent in R). Use markdown formatting as described in this cheat-sheet. You may want to provide a table or itemized list, and you should use code formatting to indicate file extensions and programming languages."
  },
  {
    "objectID": "homework/01-scripts-notebooks.html#playing-with-code-in-notebooks",
    "href": "homework/01-scripts-notebooks.html#playing-with-code-in-notebooks",
    "title": "Homework 1: Scripts and Notebooks",
    "section": "Playing with Code in Notebooks",
    "text": "Playing with Code in Notebooks\nThe code chunk below defines a logarithmic spiral. Using this reference, modify the code so that it now plots Fermat’s spiral. Use \\(a = 1\\).\n\n# Define the angle of the spiral (polar coords)\n# go around two full times (2*pi = one revolution)\ntheta <- seq(0, 4*pi, .01) \n# Define the distance from the origin of the spiral\n# Needs to have the same length as theta\nr <- seq(0, 5, length.out = length(theta))\n\n# Now define x and y in cartesian coordinates\nx <- r * cos(theta)\ny <- r * sin(theta)\n\nplot(x, y, type = \"l\")\n\n\n\n\nCan you do the same thing in Python? It may help to know that in Python, to raise something to a power, you use ** instead of ^.\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the angle of the spiral (polar coords)\n# go around two full times (2*pi = one revolution)\ntheta = np.arange(0, 4 * np.pi, 0.01)\n# Define the distance from the origin of the spiral\n# Needs to have the same length as theta \n# (get length of theta with theta.size, \n#  and then divide 5 by that to get the increment)\nr = np.arange(0, 5, 5/theta.size)\n\n# Now define x and y in cartesian coordinates\nx = r * np.cos(theta)\ny = r * np.sin(theta)\n\n# Define the axes\nfig, ax = plt.subplots()\n# Plot the line\nax.plot(x, y)\nplt.show()"
  },
  {
    "objectID": "homework/02-finding-your-way.html",
    "href": "homework/02-finding-your-way.html",
    "title": "Homework 2: Finding Your Way in R and Python",
    "section": "",
    "text": "Download the starter qmd file here"
  },
  {
    "objectID": "homework/02-finding-your-way.html#madlibs",
    "href": "homework/02-finding-your-way.html#madlibs",
    "title": "Homework 2: Finding Your Way in R and Python",
    "section": "MadLibs",
    "text": "MadLibs\n\nRunning a Python Script at the command line\nRun the script madlibs.py using the terminal to run the script (e.g. type python3 madlibs.py in the terminal). Do what it asks of you. Copy the text after the initial command and paste it between the markings below. (These define a generic, no-language markdown code chunk).\n# Paste your output here!\nCan you run this same script in RStudio using the Source Script button? If you can, please describe any differences you note compared to using the terminal. If you cannot, tell me what happens."
  },
  {
    "objectID": "homework/02-finding-your-way.html#thinking-critically",
    "href": "homework/02-finding-your-way.html#thinking-critically",
    "title": "Homework 2: Finding Your Way in R and Python",
    "section": "Thinking Critically",
    "text": "Thinking Critically\nConsider the counting words examples in the textbook (Your Turn – Terminal Mode, Your Turn – Script Mode). Look at the code, and then at the steps provided for each example. What is different? What is the same? Create a table comparing terminal mode, script mode (e.g. running the whole script using the Run button), and interactive mode. Address the specific differences in how the user interacts with the code, differences in any user inputs (if available) and how they’re specified, and any differences in the output."
  },
  {
    "objectID": "homework/03-data-types.html",
    "href": "homework/03-data-types.html",
    "title": "Homework 3: Basic Data Types",
    "section": "",
    "text": "Download the starter qmd file here"
  },
  {
    "objectID": "homework/03-data-types.html#pythagorean-theorem-in-r",
    "href": "homework/03-data-types.html#pythagorean-theorem-in-r",
    "title": "Homework 3: Basic Data Types",
    "section": "Pythagorean Theorem in R",
    "text": "Pythagorean Theorem in R\n\\[a^2 + b^2 = c^2\\]\nUse the chunk below to define variables \\(a\\), \\(b\\), and \\(c\\), where you set \\(a\\) and \\(b\\) and \\(c\\) is determined mathematically. You may need to find the square root function in R to make this work.\n\n# Your pythagorean theorem code goes here"
  },
  {
    "objectID": "homework/03-data-types.html#quadratic-formula-in-python",
    "href": "homework/03-data-types.html#quadratic-formula-in-python",
    "title": "Homework 3: Basic Data Types",
    "section": "Quadratic Formula in Python",
    "text": "Quadratic Formula in Python\n\\[x = -b \\pm \\frac{\\sqrt{b^2 - 4ac}}{2a}\\]\nUse the chunk below to define variables \\(a\\), \\(b\\), and \\(c\\), and then define \\(x1\\) and \\(x2\\), the possible values for \\(x\\).\n\n# Your quadratic formula code goes here"
  },
  {
    "objectID": "homework/03-data-types.html#debugging-practice",
    "href": "homework/03-data-types.html#debugging-practice",
    "title": "Homework 3: Basic Data Types",
    "section": "Debugging practice",
    "text": "Debugging practice\nLook at the data frame below, which contains 3 columns: Name, Salary, and Hire.Year. You’ve read in this data from the data file online and ideally, you want to plot Hire.Year on the x-axis and Salary on the y-axis (code to do this is provided).\nUnfortunately, the data isn’t reading in properly. Identify the problem, propose a solution, and try to implement your solution using functions on the R reference card.\nSome things you may want to consider:\n\ngsub\nYou can access columns in a data frame using $: df$col1 will get you col1 of the df object. (We will talk about data frames more next week, but for now, just try to use them)\nYou can access items in a vector using []: x[1] will get you the first item in x\n\nNote: You should be able to identify the problem given what you know about R from this chapter. You may not be able to implement a solution without some additional research, so if you don’t get that far that’s ok.\n\n# This line reads in a tab-separated data file with a header naming the columns\nsalary <- read.table(\"https://srvanderplas.github.io/stat151-homework/3-data.tsv\",\n                     sep = \"\\t\", header = T)\n\n# This code plots labels for each individual at location (x, y)\nlibrary(ggplot2)\nggplot(salary, aes(x = Hire.Year, y = Salary, label = Name)) +\n  geom_label()\n\n\n\n# This displays the salary object\nsalary\n\n            Name     Salary Hire.Year\n1  Michael Scott $67,872.00      1995\n2 Dwight Schrute      54000      2001\n3     Pam Beesly      26309      2003\n4    Jim Halpert      59083      1998\n\n\n\nThe problem with the data is:\nHere is how I solved the problem:\n\n# Your implementation code goes here"
  },
  {
    "objectID": "homework/04-cipher.html",
    "href": "homework/04-cipher.html",
    "title": "Homework 4: Cipher",
    "section": "",
    "text": "Download the starter qmd file here\nThis assignment is modified from the decodeR exercises by Kelly Bodwin and Allison Theobold.\nOnce you finish this assignment, think about how you might decode the message in python. For +5 extra credit, write python code that decodes the message, following the outline of the R code you’ve already written.\nIn this assignment, you will be creating and manipulating vectors, lists, and data frames to uncover a top secret message.\nSome advice:"
  },
  {
    "objectID": "homework/04-cipher.html#part-one-setup",
    "href": "homework/04-cipher.html#part-one-setup",
    "title": "Homework 4: Cipher",
    "section": "Part One: Setup",
    "text": "Part One: Setup\nEach of the following R chunks will cause an error and/or do the desired task incorrectly.\nFind the mistake, and correct it to complete the intended action.\nFor each error, write 1-2 sentences to reflect on what the mistake was and how you found it and fixed it.\n\nCreate vectors containing the upper case letters, lower case letters, and some punctuation marks.\n\n\nlower_case <- c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n\nupper_case <- c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\" \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\")\n\npunctuation <- c(\".\", \",\", \"!\", \"?\", \"'\", \"\"\", \"(\", \")\", \" \", \"-\", \";\", \":\")\n\nError: <text>:3:56: unexpected string constant\n2: \n3: upper_case <- c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\" \"I\"\n                                                          ^\n\n\n\nMake one long vector containing all the symbols.\n\n\nmy_symbols <- cbind(lower_case, upper_case, punctuation)\n\nError in cbind(lower_case, upper_case, punctuation): object 'lower_case' not found\n\n\n\nTurn the my_symbols vector into a data frame, with the variable name “Symbol”\n\n\nmy_symbols <- dataframe(my_symbols)\n\nError in dataframe(my_symbols): could not find function \"dataframe\"\n\nnames(my_symbols) = Symbol\n\nError in eval(expr, envir, enclos): object 'Symbol' not found\n\n\n\nFind the total number of symbols we have in our data frame.\n\n\nlen <- length(my_symbols)\n\nError in eval(expr, envir, enclos): object 'my_symbols' not found\n\n\n\nCreate a new variable in your dataframe that assigns a number to each symbol.\n\n\nmy_symbols%Num <- 1:len\n\nError: <text>:1:11: unexpected input\n1: my_symbols%Num <- 1:len\n              ^"
  },
  {
    "objectID": "homework/04-cipher.html#part-two-decoding-the-secret-message.",
    "href": "homework/04-cipher.html#part-two-decoding-the-secret-message.",
    "title": "Homework 4: Cipher",
    "section": "Part Two: Decoding the secret message.",
    "text": "Part Two: Decoding the secret message.\nThis chunk will load up the encoded secret message as a vector:\n\ntop_secret <- read.csv(\"https://raw.githubusercontent.com/srvanderplas/unl-stat151/main/homework/04_Secret_Code\", header = FALSE)$V1\n\nBy altering this top secret set of numbers, you will be able to create a message. Write your own code to complete the steps below.\n\nAdd 14 to every number.\nMultiply every number by 18, then subtract 257.\nExponentiate every number. (That is, do e1.)\nSquare every number.\n\nCheckpoint: Headquarters has informed you that at this stage of decoding, there should be 352 numbers in the secret message that are below 17.\n\nTurn your vector of numbers into a matrix with 5 columns.\nSeparately from your top secret numbers, create a vector of all the even numbers between 1 and 382. Name it “evens”. That is, “evens” should contain 2, 4, 6, 8 …, 382.\nSubtract the “evens” vector from the first column of your secret message matrix.\nSubtract 100 from all numbers in the 18-24th rows of the 3rd column.\nMultiply all numbers in the 4th and 5th column by 2.\nTurn your matrix back into a vector.\n\nCheckpoint: Headquarters has informed you that at this stage of decoding, all numbers in indices 500 and beyond are below 100.\n\nTake the square root of all numbers in indices 38 to 465.\nRound all numbers to the nearest whole number.\nReplace all instances of the number 39 with 20.\n\nCheckpoint: Headquarters has informed you that your final message should have 344 even numbers."
  },
  {
    "objectID": "homework/04-cipher.html#part-3-the-secret-message",
    "href": "homework/04-cipher.html#part-3-the-secret-message",
    "title": "Homework 4: Cipher",
    "section": "Part 3: The secret message!",
    "text": "Part 3: The secret message!\nUse your final vector of numbers as indices for my_symbols to discover the final message!\nGoogle the first line of this message, if you do not recognize it, to see what it is.\nWrite 3-4 sentences about what you learned from this investigation. What problems did you encounter, and how did you solve them?"
  },
  {
    "objectID": "homework/05-vectors.html",
    "href": "homework/05-vectors.html",
    "title": "Homework 5: Vectors and Control Structures",
    "section": "",
    "text": "Download the starter qmd file here"
  },
  {
    "objectID": "homework/05-vectors.html#set-up",
    "href": "homework/05-vectors.html#set-up",
    "title": "Homework 5: Vectors and Control Structures",
    "section": "Set-Up",
    "text": "Set-Up\nRunning the following chunk will generate two files and save them to your current working directory.\n\nset.seed(24038243)\n# Generate a vector of data for the problem\nx <- round(runif(100, 0, 1e6))\ny <- round(runif(100, 0, 1e6))\n\n# write it to a file\nwriteLines(as.character(x), con = \"hw5data-r.txt\")\nwriteLines(as.character(y), con = \"hw5data-py.txt\")"
  },
  {
    "objectID": "homework/05-vectors.html#navigation",
    "href": "homework/05-vectors.html#navigation",
    "title": "Homework 5: Vectors and Control Structures",
    "section": "Navigation",
    "text": "Navigation\nThe following problem is inspired by the first problem in the 2021 Advent of Code challenge and as a result is Santa-themed.\nYou’re minding your own business on a ship at sea when the overboard alarm goes off! You rush to see if you can help. Apparently, one of the Elves tripped and accidentally sent the sleigh keys flying into the ocean! Before you know it, you’re inside a submarine the Elves keep ready for situations like this.\nAs the submarine drops below the surface of the ocean, it automatically performs a sonar sweep of the nearby sea floor. On a small screen, the sonar sweep report (your puzzle input) appears: each line is a measurement of the sea floor depth as the sweep looks further and further away from the submarine.\nFor example, suppose you had the following report:\n199\n200\n208\n210\n200\n207\n240\n269\n260\n263\nThis report indicates that, scanning outward from the submarine, the sonar sweep found depths of 199, 200, 208, 210, and so on.\nThe first order of business is to figure out how quickly the depth increases, just so you know what you’re dealing with - you never know if the keys will get carried into deeper water by an ocean current or a fish or something.\nTo do this, count the number of times a depth measurement increases from the previous measurement. (There is no measurement before the first measurement.) In the example above, the changes are as follows:\n199 (N/A - no previous measurement)\n200 (increased)\n208 (increased)\n210 (increased)\n200 (decreased)\n207 (increased)\n240 (increased)\n269 (increased)\n260 (decreased)\n263 (increased)\nIn this example, there are 7 measurements that are larger than the previous measurement.\nHow many measurements are larger than the previous measurement?\n\nPart 1 - Planning the solution\nDraw a program flow map to show how you plan to solve the problem. I used excalidraw.com to draw the maps in the book.\nExport your map to a png, upload it to an image hosting site like imgur, and include the link here. Make sure to link directly to the PNG (right click, get link to image).\n\n\n\nPart 2 - Writing the code\nYou have two files, hw4data-r.txt and hw4data-py.txt. I have provided you with code to read the data in from these files (if they aren’t in your current working directory, run the chunk in the Set-up section, which creates the files).\n\nR\n\nx <- readLines(\"hw5data-r.txt\")\n\n## Solve the problem below this comment\n\n\nnx <- NA # Your answer should be stored in the nx variable to make the line below this chunk work\n\nThere are NA measurements larger than the previous measurement.\n\n\nPython\n\nimport numpy as np\nx = np.loadtxt('hw5data-py.txt')\n\n## Solve the problem below this comment\n\n\nnx2 = 0 # your answer should be stored in the nx variable to make the line below this chunk work\n\nThere are 0 measurements larger than the previous measurement."
  },
  {
    "objectID": "slides/01-Syllabus-and-Introductions.html#introduce-yourself",
    "href": "slides/01-Syllabus-and-Introductions.html#introduce-yourself",
    "title": "Stat 151 - Introduction",
    "section": "Introduce yourself!",
    "text": "Introduce yourself!\n\nName / Year / Major\nWhat do you hope to learn in this class?\nPrevious computing experience?\nIs a poptart a ravioli? Why or why not?"
  },
  {
    "objectID": "slides/01-Syllabus-and-Introductions.html#my-introduction",
    "href": "slides/01-Syllabus-and-Introductions.html#my-introduction",
    "title": "Stat 151 - Introduction",
    "section": "My Introduction",
    "text": "My Introduction\n\nSusan Vanderplas\nAssistant Professor in Statistics\nPh.D. from Iowa State in 2015\nUndergrad from Texas A&M in 2009\nR user for 13 years, Python user for 1.5 years\nDabbled in JavaScript, HTML, C/C++\nI have Prosopagnosia - face blindness\nOn Poptarts and Ravioli…"
  },
  {
    "objectID": "slides/01-Syllabus-and-Introductions.html#contact-info",
    "href": "slides/01-Syllabus-and-Introductions.html#contact-info",
    "title": "Stat 151 - Introduction",
    "section": "Contact Info",
    "text": "Contact Info\n\nEmail: susan.vanderplas@unl.edu\nOffice: 343D Hardin Hall North Wing\nPhone: I don’t ever answer it… use email\nOffice Hours: https://calendly.com/drvanderplas/officehours\nSelf-serve, by Zoom unless you specify otherwise.\nTextbook: https://srvanderplas.github.io/stat-computing-r-python\nCourse site: https://srvanderplas.github.io/unl-stat151/"
  },
  {
    "objectID": "slides/01-Syllabus-and-Introductions.html#course-objectives",
    "href": "slides/01-Syllabus-and-Introductions.html#course-objectives",
    "title": "Stat 151 - Introduction",
    "section": "Course Objectives",
    "text": "Course Objectives\n\nBe comfortable using R and/or python for statistical analysis\nWrite basic programs using logic including for loops, control structures, and matrix arithmetic\nImplement basic data analyses in R or python\nDescribe the sequence of logical or mathematical steps necessary to solve a simple problem\nBe familiar with good computing practices, such as version control and documentation"
  },
  {
    "objectID": "slides/01-Syllabus-and-Introductions.html#textbook",
    "href": "slides/01-Syllabus-and-Introductions.html#textbook",
    "title": "Stat 151 - Introduction",
    "section": "Textbook",
    "text": "Textbook\nhttps://srvanderplas.github.io/stat-computing-r-python/"
  },
  {
    "objectID": "slides/01-Syllabus-and-Introductions.html#class-schedule",
    "href": "slides/01-Syllabus-and-Introductions.html#class-schedule",
    "title": "Stat 151 - Introduction",
    "section": "Class Schedule",
    "text": "Class Schedule"
  },
  {
    "objectID": "slides/01-Syllabus-and-Introductions.html#outline",
    "href": "slides/01-Syllabus-and-Introductions.html#outline",
    "title": "Stat 151 - Introduction",
    "section": "Outline",
    "text": "Outline\nSubject to change based on how much programming you are already familiar with…\n\n\n\nTentative schedule of class topics\n\n\nDate\nTime\nTopic\n\n\n\n\nJan 25\n\nGetting Started\n\n\nFeb 1\n\nScripts & Notebooks\n\n\nFeb 8\n\nIntro to Programming\n\n\nFeb 15\n\nData Types\n\n\nFeb 22\n\nData Structures\n\n\nMar 1\n\nControl Structures\n\n\nMar 8\nIn Class\nMidterm\n\n\nMar 22\n\nFunctions\n\n\nMar 29\n\nWorking with Data\n\n\nApr 5\n\nData Cleaning"
  },
  {
    "objectID": "slides/01-Syllabus-and-Introductions.html#grades",
    "href": "slides/01-Syllabus-and-Introductions.html#grades",
    "title": "Stat 151 - Introduction",
    "section": "Grades",
    "text": "Grades\n\n\n\nAssignments\nWeight\n\n\n\n\nReading Quizzes\n10%\n\n\nWeekly Homework & Participation\n50%\n\n\nMidterm Exam\n20%\n\n\nFinal Exam\n20%\n\n\n\nApproximately Weekly Homework – started in class"
  },
  {
    "objectID": "slides/01-Syllabus-and-Introductions.html#academic-integrity-submitted-work-policy",
    "href": "slides/01-Syllabus-and-Introductions.html#academic-integrity-submitted-work-policy",
    "title": "Stat 151 - Introduction",
    "section": "Academic Integrity / Submitted Work Policy",
    "text": "Academic Integrity / Submitted Work Policy\n\nYou may (and should!) work with each other on homework assignments\nWork alone on exams\nYou must be able to explain the logic of anything you submit for a grade\nAt my discretion, I will evaluate the coherence of your explanation instead of your submitted work\nChatGPT, StackOverflow, Google are all valuable tools, but they do not help you think"
  },
  {
    "objectID": "slides/01-Syllabus-and-Introductions.html#programming",
    "href": "slides/01-Syllabus-and-Introductions.html#programming",
    "title": "Stat 151 - Introduction",
    "section": "Programming",
    "text": "Programming"
  },
  {
    "objectID": "slides/01-Syllabus-and-Introductions.html#install-course-software",
    "href": "slides/01-Syllabus-and-Introductions.html#install-course-software",
    "title": "Stat 151 - Introduction",
    "section": "Install Course Software",
    "text": "Install Course Software\nTextbook Chapter: https://bit.ly/3JtGCZR"
  },
  {
    "objectID": "slides/01-Syllabus-and-Introductions.html#next-time",
    "href": "slides/01-Syllabus-and-Introductions.html#next-time",
    "title": "Stat 151 - Introduction",
    "section": "Next Time",
    "text": "Next Time\nWe’ll work on Scripts and Notebooks\nPlease Read before class: - Computer Basics - Scripts and Notebooks - RStudio’s Interface"
  }
]